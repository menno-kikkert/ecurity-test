<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.7.3</version>
    </parent>
    <groupId>test</groupId>
    <artifactId>kotlin-spring-service-template</artifactId>
    <version>0.25.1-SNAPSHOT</version>
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>11</java.version>
        <docker.image.version>${project.version}</docker.image.version>

        <excludedGroups/>
        <stage>junit</stage>
        <sonar.coverage.jacoco.xmlReportPaths>
            target/site/jacoco-junit/jacoco.xml,
            target/site/jacoco-component/jacoco.xml,
            target/site/jacoco-contract/jacoco.xml,
            target/site/jacoco-integration/jacoco.xml,
            target/site/jacoco-load/jacoco.xml,
            target/site/jacoco-e2e/jacoco.xml
        </sonar.coverage.jacoco.xmlReportPaths>
        <sonar.java.source>${java.version}</sonar.java.source>
        <skipTests>false</skipTests>
        <skipITs>true</skipITs>

        <!-- Dependency versions -->
        <!-- Spring versions -->
        <spring-cloud.version>2021.0.4</spring-cloud.version>
        <spring-cloud-contract.version>3.0.3</spring-cloud-contract.version>
        <!-- Azure -->
        <azure.version>2.6.4</azure.version>
        <!-- Other versions -->
        <ojdbc8.version>12.2.0.1</ojdbc8.version>
        <wiremock.version>2.32.0</wiremock.version>
        <mockk.version>1.12.1</mockk.version>
        <pact.version>4.0.10</pact.version>
        <sonar-jacoco-listeners.version>5.14.0.18788</sonar-jacoco-listeners.version>
        <!-- Plugin versions -->
        <maven-toolchains-plugin.version>3.0.0</maven-toolchains-plugin.version>
        <sonar-java-plugin.version>7.4.0.27839</sonar-java-plugin.version>
        <jacoco.version>0.8.7</jacoco.version>
        <pit.version>1.7.2</pit.version>
        <pitest-junit5-plugin.version>0.14</pitest-junit5-plugin.version>
    </properties>
    <profiles>
        <!-- Profiles are generally configured by the pipeline, when deploying to environments or reaching certain test stages -->
        <profile>
            <!-- When reaching component test stage, disable the other JUnit categories -->
            <id>component</id>
            <properties>
                <skipTests>true</skipTests>
                <skipITs>false</skipITs>
                <excludedGroups>
                    IntegrationTests
                </excludedGroups>
                <stage>component</stage>
            </properties>
        </profile>
        <profile>
            <!-- When reaching integration test stage, disable the other JUnit categories -->
            <id>integration</id>
            <properties>
                <skipTests>true</skipTests>
                <skipITs>false</skipITs>
                <excludedGroups>
                    ComponentTests
                </excludedGroups>
                <stage>integration</stage>
            </properties>
        </profile>
        <profile>
            <id>mutation-incremental</id>
            <properties>
                <skipTests>true</skipTests>
                <skipITs>true</skipITs>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.pitest</groupId>
                        <artifactId>pitest-maven</artifactId>
                        <configuration>
                            <threads>1</threads>
                            <historyInputFile>.pit/pitest-history-${project.artifactId}</historyInputFile>
                        </configuration>
                        <executions>
                            <execution>
                                <id>pit-execute-mutation-coverage</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>mutationCoverage</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>mutation-baseline</id>
            <properties>
                <skipTests>true</skipTests>
                <skipITs>true</skipITs>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.pitest</groupId>
                        <artifactId>pitest-maven</artifactId>
                        <configuration>
                            <threads>1</threads>
                            <historyOutputFile>.pit/pitest-history-${project.artifactId}</historyOutputFile>
                        </configuration>
                        <executions>
                            <execution>
                                <id>pit-execute-mutation-coverage</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>mutationCoverage</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-contract-dependencies</artifactId>
                <version>${spring-cloud-contract.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>
    <dependencies>
        <!-- Kotlin -->
        <dependency>
            <groupId>org.jetbrains.kotlin</groupId>
            <artifactId>kotlin-stdlib</artifactId>
        </dependency>
        <dependency>
            <groupId>org.jetbrains.kotlinx</groupId>
            <artifactId>kotlinx-coroutines-core</artifactId>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.module</groupId>
            <artifactId>jackson-module-kotlin</artifactId>
        </dependency>
        <!-- Spring -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-devtools</artifactId>
            <scope>runtime</scope>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <!-- Spring Web -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-dependencies</artifactId>
            <version>${spring-cloud.version}</version>
            <type>pom</type>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-openfeign</artifactId>
        </dependency>
        <!-- App Insights & Metrics -->
        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-core</artifactId>
        </dependency>
        <dependency>
            <groupId>io.micrometer</groupId>
            <artifactId>micrometer-registry-prometheus</artifactId>
        </dependency>
        <!-- MongoDB  -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-mongodb</artifactId>
        </dependency>
        <!-- Not included by default from Java 9 -->
        <dependency>
            <groupId>javax.xml.bind</groupId>
            <artifactId>jaxb-api</artifactId>
        </dependency>
        <!-- Test -->
        <!-- Kotlin -->
        <dependency>
            <groupId>org.jetbrains.kotlin</groupId>
            <artifactId>kotlin-test-junit</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.mockk</groupId>
            <artifactId>mockk</artifactId>
            <version>${mockk.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.sonarsource.java</groupId>
            <artifactId>sonar-jacoco-listeners</artifactId>
            <version>${sonar-jacoco-listeners.version}</version>
            <scope>test</scope>
        </dependency>
        <!-- JUnit 5 -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- Spring -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- Security -->
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-test</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- Rest Assured -->
        <dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>json-path</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>rest-assured</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>json-schema-validator</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>spring-mock-mvc</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- WireMock -->
        <dependency>
            <groupId>com.github.tomakehurst</groupId>
            <artifactId>wiremock-jre8</artifactId>
            <version>${wiremock.version}</version>
            <scope>test</scope>
        </dependency>
        <!-- Contract -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-contract-stub-runner</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-contract-verifier</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-contract-wiremock</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>au.com.dius</groupId>
            <artifactId>pact-jvm-consumer</artifactId>
            <version>${pact.version}</version>
            <scope>test</scope>
        </dependency>
        <!-- MongoDB -->
        <dependency>
            <groupId>de.flapdoodle.embed</groupId>
            <artifactId>de.flapdoodle.embed.mongo</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- OpenAPI 3 and Swagger-->
        <dependency>
            <groupId>org.springdoc</groupId>
            <artifactId>springdoc-openapi-ui</artifactId>
            <version>1.6.11</version>
        </dependency>
        <dependency>
            <groupId>commons-logging</groupId>
            <artifactId>commons-logging</artifactId>
            <version>1.2</version>
        </dependency>
    </dependencies>
    <build>
        <finalName>rtp-kotlin-spring-service-template</finalName>
        <sourceDirectory>src/main/kotlin</sourceDirectory>
        <testSourceDirectory>src/test/kotlin</testSourceDirectory>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <configuration>
                    <nonFilteredFileExtensions>
                        <nonFilteredFileExtension>yml</nonFilteredFileExtension>
                    </nonFilteredFileExtensions>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.jetbrains.kotlin</groupId>
                <artifactId>kotlin-maven-plugin</artifactId>
                <configuration>
                    <compilerPlugins>
                        <!-- spring needs some beans and methods to be non-final, see https://kotlinlang.org/docs/reference/compiler-plugins.html#spring-support -->
                        <plugin>spring</plugin>
                    </compilerPlugins>
                    <jvmTarget>11</jvmTarget>
                </configuration>
                <executions>
                    <execution>
                        <id>compile</id>
                        <phase>process-sources</phase>
                        <goals>
                            <goal>compile</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>test-compile</id>
                        <phase>process-test-sources</phase>
                        <goals>
                            <goal>test-compile</goal>
                        </goals>
                    </execution>
                </executions>
                <dependencies>
                    <dependency>
                        <groupId>org.jetbrains.kotlin</groupId>
                        <artifactId>kotlin-maven-allopen</artifactId>
                        <version>${kotlin.version}</version>
                    </dependency>
                </dependencies>
            </plugin>
            <plugin>
                <!-- Generates a property file, which can be shown using the /manage/info endpoints -->
                <groupId>pl.project13.maven</groupId>
                <artifactId>git-commit-id-plugin</artifactId>
                <version>${git-commit-id-plugin.version}</version>
                <configuration>
                    <dateFormat>MM-dd-yyyy '@' HH:mm:ss</dateFormat>
                    <includeOnlyProperties>
                        <includeOnlyProperty>^git.commit.id$</includeOnlyProperty>
                        <includeOnlyProperty>git.commit.time</includeOnlyProperty>
                        <includeOnlyProperty>git.branch</includeOnlyProperty>
                        <includeOnlyProperty>git.commit.message.full</includeOnlyProperty>
                    </includeOnlyProperties>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>${maven-dependency-plugin.version}</version>
                <executions>
                    <execution>
                        <id>getClasspathFilenames</id>
                        <goals>
                            <goal>properties</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <!-- Configuration for unit tests -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <skipTests>${skipTests}</skipTests>
                    <useSystemClassLoader>false</useSystemClassLoader>
                    <perCoreThreadCount>false</perCoreThreadCount>
                    <forkCount>2.0C</forkCount>
                    <!-- NOTE: when using this with Toolchains, make sure to run Maven on the latest JDK. -->
                    <reuseForks>true</reuseForks>
                    <threadCount>20</threadCount>
                    <runOrder>random</runOrder>
                    <excludes>
                        <exclude>**/ContractVerifierTest</exclude>
                    </excludes>
                    <properties>
                        <!-- add SonarQube's JaCoCo listener to enable -->
                        <!-- gathering of code coverage metrics per test -->
                        <property>
                            <name>listener</name>
                            <value>org.sonar.java.jacoco.JUnitListener</value>
                        </property>
                    </properties>
                </configuration>
            </plugin>
            <plugin>
                <!-- For integration tests, JUnit categories are decided by the active profiles -->
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <configuration>
                    <failIfNoTests>false</failIfNoTests>
                    <skipTests>${skipITs}</skipTests>
                    <skipITs>${skipITs}</skipITs>
                    <excludedGroups>${excludedGroups}</excludedGroups>
                    <runOrder>random</runOrder>
                    <includes>
                        <include>**/ContractVerifierTest</include>
                        <include>**/*IT</include>
                        <include>**/*CT</include>
                    </includes>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <profiles>
                        <profile>tst</profile>
                        <profile>local</profile>
                    </profiles>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <!-- This goal adds build information the the /info endpoint -->
                            <goal>build-info</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>${jacoco.version}</version>
                <executions>
                    <execution>
                        <id>default-prepare-agent</id>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                        <configuration>
                            <destFile>${project.build.directory}/jacoco/jacoco-${stage}.exec</destFile>
                        </configuration>
                    </execution>
                    <execution>
                        <id>default-report</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>
                        <configuration>
                            <dataFile>${project.build.directory}/jacoco/jacoco-${stage}.exec</dataFile>
                            <outputDirectory>${project.reporting.outputDirectory}/jacoco-${stage}</outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-toolchains-plugin</artifactId>
                <version>${maven-toolchains-plugin.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>toolchain</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <toolchains>
                        <jdk>
                            <version>${java.version}</version>
                        </jdk>
                    </toolchains>
                </configuration>
            </plugin>
        </plugins>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.pitest</groupId>
                    <artifactId>pitest-maven</artifactId>
                    <version>${pit.version}</version>
                    <dependencies>
                        <dependency>
                            <groupId>org.pitest</groupId>
                            <artifactId>pitest-junit5-plugin</artifactId>
                            <version>${pitest-junit5-plugin.version}</version>
                        </dependency>
                    </dependencies>
                    <configuration>
                        <failWhenNoMutations>false</failWhenNoMutations>
                        <outputFormats>
                            <outputFormat>HTML</outputFormat>
                            <outputFormat>XML</outputFormat>
                        </outputFormats>
                        <excludedClasses>
                            <param>**.*Application</param>
                            <param>**.*Config*</param>
                            <!-- Synthetic classes -->
                            <param>*.*$*</param>
                        </excludedClasses>
                        <excludedTestClasses>
                            <param>**.*IT</param>
                        </excludedTestClasses>
                        <threads>1</threads>
                        <timeoutFactor>3</timeoutFactor>
                        <avoidCallsTo>
                            <avoidCallsTo>java.util.logging</avoidCallsTo>
                            <avoidCallsTo>org.apache.log4j</avoidCallsTo>
                            <avoidCallsTo>org.slf4j</avoidCallsTo>
                            <avoidCallsTo>org.apache.commons.logging</avoidCallsTo>
                            <avoidCallsTo>kotlin.jvm.internal</avoidCallsTo>
                            <avoidCallsTo>kotlin.comparisons</avoidCallsTo>
                            <avoidCallsTo>kotlin.io.CloseableKt</avoidCallsTo>
                            <avoidCallsTo>kotlin.ResultKt</avoidCallsTo>
                            <avoidCallsTo>org.springframework.util.StopWatch</avoidCallsTo>
                        </avoidCallsTo>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
        <resources>
            <resource>
                <!-- This allows resources to resolve Maven properties -->
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
        </resources>
    </build>
</project>
